//
// cfg file to run L1 Global Trigger emulator on a file containing the output of the 
// GMT system, with GCT blocked 
//

process TestGtGmtFile = {

    // source file: GMT produced file 
    source = PoolSource {
        untracked vstring fileNames = {
            'file:/afs/cern.ch/user/g/ghete/scratch0/CmsswTestFiles/testGt_Emulator_GmtFile_source.root'
        }
    }    

    untracked PSet maxEvents = { untracked int32 input = 10 }
    
    // load and configure modules
    
    // L1 GT EventSetup
    include "L1TriggerConfig/L1GtConfigProducers/data/L1GtConfig.cff"
    
    // Global Trigger emulator
    include "L1Trigger/GlobalTrigger/data/gtDigis.cfi"

    // block GCT input
    replace l1GtParameters.DaqActiveBoards = 0xFFE3
    
    // input tag for GMT readout collection: 
    //     gmtDigis = GMT emulator (default)
    //     l1GtUnpack     = GT unpacker (common GT/GMT unpacker)
    //replace gtDigis.GmtInputTag = l1GtUnpack
    
    // logical flag to produce the L1 GT DAQ readout record
    //     if true, produce the record (default)
    //replace gtDigis.ProduceL1GtDaqRecord = false
    
    // logical flag to produce the L1 GT EVM readout record
    //     if true, produce the record (default)
    //replace gtDigis.ProduceL1GtEvmRecord = false

    // logical flag to produce the L1 GT object map record
    //     if true, produce the record (default)
    //replace gtDigis.ProduceL1GtObjectMapRecord = false

    // logical flag to write the PSB content in the  L1 GT DAQ record
    //     if true, write the PSB content in the record (default)
    //replace gtDigis.WritePsbL1GtDaqRecord = false

    // logical flag to read the technical trigger records
    //     if true, it will read via getMany the available records (default)
    //replace gtDigis.ReadTechnicalTriggerRecords = false

    // number of "bunch crossing in the event" (BxInEvent) to be emulated
    // symmetric around L1Accept (BxInEvent = 0):
    //    1 (BxInEvent = 0); 3 (F 0 1) (standard record); 5 (E F 0 1 2) (debug record)
    // even numbers (except 0) "rounded" to the nearest lower odd number
    // negative value: emulate TotalBxInEvent as given in EventSetup  
    //replace gtDigis.EmulateBxInEvent = 3
    
    // module list
    path p = { gtDigis }

    // uncomment / comment messages with DEBUG mode to run in DEBUG mode
    service = MessageLogger {

        untracked vstring destinations =  {"testGt_Emulator_GmtFile"}
        untracked PSet testGt_Emulator_GmtFile = { 
            untracked string threshold = "DEBUG"                  // DEBUG 
            untracked PSet DEBUG = { untracked int32 limit = -1}  // DEBUG, all messages  
            //untracked PSet DEBUG = { untracked int32 limit = 10}  // DEBUG, max 10 messages  
          untracked PSet INFO = { untracked int32 limit = -1}    
        }
    untracked vstring debugModules = { "gtDigis"}              // DEBUG  
      
    }

    // keep GMT and GT output records
    // update labels if InputTags are replaced!
            
    module outputL1GlobalTrigger = PoolOutputModule { 
        untracked vstring outputCommands = {
            "drop *",
            "keep *_gmtDigis_*_*",
            "keep *_gtDigis_*_*"
        }

        untracked string fileName = "testGt_Emulator_GmtFile_output.root" 
    }
    
    endpath outpath = { outputL1GlobalTrigger }
        
    
}